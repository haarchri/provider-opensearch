/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IsmPolicyMappingObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type IsmPolicyMappingParameters struct {

	// When updating multiple indices, you might want to include a state filter to only affect certain managed indices. The background process only applies the change if the index is currently in the state specified.
	// +kubebuilder:validation:Optional
	Include []map[string]*string `json:"include,omitempty" tf:"include,omitempty"`

	// Name of the index to apply the policy to. You can use an index pattern to update multiple indices at once.
	// +kubebuilder:validation:Required
	Indexes *string `json:"indexes" tf:"indexes,omitempty"`

	// +kubebuilder:validation:Optional
	IsSafe *bool `json:"isSafe,omitempty" tf:"is_safe,omitempty"`

	// +kubebuilder:validation:Optional
	ManagedIndexes []*string `json:"managedIndexes,omitempty" tf:"managed_indexes,omitempty"`

	// The name of the policy.
	// +kubebuilder:validation:Required
	PolicyID *string `json:"policyId" tf:"policy_id,omitempty"`

	// After a change in policy takes place, specify the state for the index to transition to
	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

// IsmPolicyMappingSpec defines the desired state of IsmPolicyMapping
type IsmPolicyMappingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IsmPolicyMappingParameters `json:"forProvider"`
}

// IsmPolicyMappingStatus defines the observed state of IsmPolicyMapping.
type IsmPolicyMappingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IsmPolicyMappingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IsmPolicyMapping is the Schema for the IsmPolicyMappings API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opensearch}
type IsmPolicyMapping struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IsmPolicyMappingSpec   `json:"spec"`
	Status            IsmPolicyMappingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IsmPolicyMappingList contains a list of IsmPolicyMappings
type IsmPolicyMappingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IsmPolicyMapping `json:"items"`
}

// Repository type metadata.
var (
	IsmPolicyMapping_Kind             = "IsmPolicyMapping"
	IsmPolicyMapping_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IsmPolicyMapping_Kind}.String()
	IsmPolicyMapping_KindAPIVersion   = IsmPolicyMapping_Kind + "." + CRDGroupVersion.String()
	IsmPolicyMapping_GroupVersionKind = CRDGroupVersion.WithKind(IsmPolicyMapping_Kind)
)

func init() {
	SchemeBuilder.Register(&IsmPolicyMapping{}, &IsmPolicyMappingList{})
}
