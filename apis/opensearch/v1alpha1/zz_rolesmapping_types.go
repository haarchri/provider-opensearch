/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RolesMappingObservation struct {

	// The name of the security role.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RolesMappingParameters struct {

	// A list of backend roles.
	// +kubebuilder:validation:Optional
	AndBackendRoles []*string `json:"andBackendRoles,omitempty" tf:"and_backend_roles,omitempty"`

	// A list of backend roles.
	// +kubebuilder:validation:Optional
	BackendRoles []*string `json:"backendRoles,omitempty" tf:"backend_roles,omitempty"`

	// Description of the role mapping.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A list of host names.
	// +kubebuilder:validation:Optional
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// The name of the security role.
	// +kubebuilder:validation:Required
	RoleName *string `json:"roleName" tf:"role_name,omitempty"`

	// A list of users.
	// +kubebuilder:validation:Optional
	Users []*string `json:"users,omitempty" tf:"users,omitempty"`
}

// RolesMappingSpec defines the desired state of RolesMapping
type RolesMappingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RolesMappingParameters `json:"forProvider"`
}

// RolesMappingStatus defines the observed state of RolesMapping.
type RolesMappingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RolesMappingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RolesMapping is the Schema for the RolesMappings API. Provides an Elasticsearch OpenSearch security role mapping.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opensearch}
type RolesMapping struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RolesMappingSpec   `json:"spec"`
	Status            RolesMappingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RolesMappingList contains a list of RolesMappings
type RolesMappingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RolesMapping `json:"items"`
}

// Repository type metadata.
var (
	RolesMapping_Kind             = "RolesMapping"
	RolesMapping_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RolesMapping_Kind}.String()
	RolesMapping_KindAPIVersion   = RolesMapping_Kind + "." + CRDGroupVersion.String()
	RolesMapping_GroupVersionKind = CRDGroupVersion.WithKind(RolesMapping_Kind)
)

func init() {
	SchemeBuilder.Register(&RolesMapping{}, &RolesMappingList{})
}
