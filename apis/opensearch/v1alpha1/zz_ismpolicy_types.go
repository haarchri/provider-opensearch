/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IsmPolicyObservation struct {

	// The id of the ISM policy.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type IsmPolicyParameters struct {

	// The policy document.
	// +kubebuilder:validation:Required
	Body *string `json:"body" tf:"body,omitempty"`

	// The id of the ISM policy.
	// +kubebuilder:validation:Required
	PolicyID *string `json:"policyId" tf:"policy_id,omitempty"`

	// The primary term of the ISM policy version.
	// +kubebuilder:validation:Optional
	PrimaryTerm *float64 `json:"primaryTerm,omitempty" tf:"primary_term,omitempty"`

	// The sequence number of the ISM policy version.
	// +kubebuilder:validation:Optional
	SeqNo *float64 `json:"seqNo,omitempty" tf:"seq_no,omitempty"`
}

// IsmPolicySpec defines the desired state of IsmPolicy
type IsmPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IsmPolicyParameters `json:"forProvider"`
}

// IsmPolicyStatus defines the observed state of IsmPolicy.
type IsmPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IsmPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IsmPolicy is the Schema for the IsmPolicys API. Provides an Elasticsearch Open Distro ISM policy.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opensearch}
type IsmPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IsmPolicySpec   `json:"spec"`
	Status            IsmPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IsmPolicyList contains a list of IsmPolicys
type IsmPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IsmPolicy `json:"items"`
}

// Repository type metadata.
var (
	IsmPolicy_Kind             = "IsmPolicy"
	IsmPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IsmPolicy_Kind}.String()
	IsmPolicy_KindAPIVersion   = IsmPolicy_Kind + "." + CRDGroupVersion.String()
	IsmPolicy_GroupVersionKind = CRDGroupVersion.WithKind(IsmPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&IsmPolicy{}, &IsmPolicyList{})
}
