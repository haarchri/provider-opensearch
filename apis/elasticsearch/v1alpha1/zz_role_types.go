/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IndexPermissionsObservation struct {
}

type IndexPermissionsParameters struct {

	// A list of allowed actions.
	// +kubebuilder:validation:Optional
	AllowedActions []*string `json:"allowedActions,omitempty" tf:"allowed_actions,omitempty"`

	// A selector for [document-level security][2] (json formatted using jsonencode).
	// +kubebuilder:validation:Optional
	DocumentLevelSecurity *string `json:"documentLevelSecurity,omitempty" tf:"document_level_security,omitempty"`

	// A list of selectors for field-level security.
	// +kubebuilder:validation:Optional
	FieldLevelSecurity []*string `json:"fieldLevelSecurity,omitempty" tf:"field_level_security,omitempty"`

	// A list of glob patterns for the index names.
	// +kubebuilder:validation:Optional
	IndexPatterns []*string `json:"indexPatterns,omitempty" tf:"index_patterns,omitempty"`

	// A list of masked fields.
	// +kubebuilder:validation:Optional
	MaskedFields []*string `json:"maskedFields,omitempty" tf:"masked_fields,omitempty"`
}

type RoleObservation struct {

	// The name of the security role.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RoleParameters struct {

	// A list of cluster permissions.
	// +kubebuilder:validation:Optional
	ClusterPermissions []*string `json:"clusterPermissions,omitempty" tf:"cluster_permissions,omitempty"`

	// Description of the role.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A configuration of index permissions (documented below).
	// +kubebuilder:validation:Optional
	IndexPermissions []IndexPermissionsParameters `json:"indexPermissions,omitempty" tf:"index_permissions,omitempty"`

	// The name of the security role.
	// +kubebuilder:validation:Required
	RoleName *string `json:"roleName" tf:"role_name,omitempty"`

	// A configuration of tenant permissions (documented below).
	// +kubebuilder:validation:Optional
	TenantPermissions []TenantPermissionsParameters `json:"tenantPermissions,omitempty" tf:"tenant_permissions,omitempty"`
}

type TenantPermissionsObservation struct {
}

type TenantPermissionsParameters struct {

	// A list of allowed actions.
	// +kubebuilder:validation:Optional
	AllowedActions []*string `json:"allowedActions,omitempty" tf:"allowed_actions,omitempty"`

	// A list of glob patterns for the tenant names.
	// +kubebuilder:validation:Optional
	TenantPatterns []*string `json:"tenantPatterns,omitempty" tf:"tenant_patterns,omitempty"`
}

// RoleSpec defines the desired state of Role
type RoleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RoleParameters `json:"forProvider"`
}

// RoleStatus defines the observed state of Role.
type RoleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RoleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Role is the Schema for the Roles API. Provides an Elasticsearch OpenSearch security role resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opensearch}
type Role struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RoleSpec   `json:"spec"`
	Status            RoleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RoleList contains a list of Roles
type RoleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Role `json:"items"`
}

// Repository type metadata.
var (
	Role_Kind             = "Role"
	Role_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Role_Kind}.String()
	Role_KindAPIVersion   = Role_Kind + "." + CRDGroupVersion.String()
	Role_GroupVersionKind = CRDGroupVersion.WithKind(Role_Kind)
)

func init() {
	SchemeBuilder.Register(&Role{}, &RoleList{})
}
